version: '3.8'

services:
  app:
    build:
      context: .
      target: production
    image: nestjs-todo-app:production
    ports:
      - '${APP_PORT:-3000}:3000'
    env_file:
      - .env.production
    environment:
      NODE_ENV: production
      DB_HOST: mysql
      DB_PORT: "${DB_PORT:-3306}"
      DB_USERNAME: "${DB_USERNAME:-root}"
      DB_PASSWORD: "${DB_PASSWORD:-}"
      DB_DATABASE: "${DB_DATABASE:-todo_app}"
      REDIS_HOST: redis
      REDIS_PORT: "${REDIS_PORT:-6379}"
      MONGO_HOST: mongo
      MONGO_PORT: "${MONGO_PORT:-27017}"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "node", "dist/healthcheck.js" ]
      interval: 30s
      timeout: 10s
      retries: 3

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - '${DB_PORT}:3306'
    volumes:
      - mysql-data:/var/lib/mysql
      - ./src/database/migrations:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u${DB_USERNAME}", "-p${DB_PASSWORD}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - '${REDIS_PORT}:6379'
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  mongo:
    image: mongo:6.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB}
    ports:
      - '${MONGO_PORT}:27017'
    volumes:
      - mongo-data:/data/db
      - ./docker/mongo/init:/docker-entrypoint-initdb.d:ro
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  mysql-data:
  redis-data:
  mongo-data:


networks:
  app-network:
    driver: bridge
